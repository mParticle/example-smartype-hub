name: 'Sync Data Plans'

on:
  workflow_dispatch:
    inputs:
      release-notes:
        description: A message describing this release
        required: false

jobs:
  check-mp-config:
    runs-on: ubuntu-latest
    name: Check mpConfig
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Data Plan Id
        id: dataPlanId
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.dataPlanId'

      - name: View Data Plan Id
        run: echo ${{steps.dataPlanId.outputs.prop}}

      - name: Get Version Number
        id: versionNumber
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.versionNumber'

      - name: View Version Number
        run: echo ${{steps.versionNumber.outputs.prop}}

      - name: Get Version File
        id: dataPlanVersionFile
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.dataPlanVersionFile'

      - name: View Version File
        run: echo ${{steps.dataPlanVersionFile.outputs.prop}}

  fetch-data-plan:
    runs-on: ubuntu-latest
    name: Fetch Data Plan Version
    needs: check-mp-config
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: '12'
          check-latest: true

      - name: Get Data Plan Id
        id: dataPlanId
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.dataPlanId'

      - name: Get Version Number
        id: versionNumber
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.versionNumber'

      - name: Get Version File
        id: dataPlanVersionFile
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.dataPlanVersionFile'

      - name: Install mP CLI
        run: npm install -g @mparticle/cli

      - name: Fetch Data Plan Version with mp CLI
        env:
          DATA_PLAN_ID: ${{ steps.dataPlanId.outputs.prop }}
          VERSION_NUMBER: ${{ steps.versionNumber.outputs.prop }}
          DATA_PLAN_VERSION_FILE: ${{ steps.dataPlanVersionFile.outputs.prop }}
          WORKSPACE_ID: ${{ secrets.MP_WORKSPACE_ID }}
          CLIENT_ID: ${{ secrets.MP_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.MP_CLIENT_SECRET }}
        run: |
          mp planning:data-plan-versions:fetch --dataPlanId=$DATA_PLAN_ID --versionNumber=$VERSION_NUMBER --workspaceId=$WORKSPACE_ID --clientId=$CLIENT_ID --clientSecret=$CLIENT_SECRET -o=$DATA_PLAN_VERSION_FILE

      - name: Get Last Modified On
        id: lastModifiedOn
        uses: notiz-dev/github-action-json-property@release
        with:
          path: ${{ steps.dataPlanVersionFile.outputs.prop }}
          prop_path: 'last_modified_on'

      - name: Format and Save Last Modified On
        id: formatedLastModifiedOn
        run: echo ::set-output name=formatedTimeStamp::$(date -d "${{ steps.lastModifiedOn.outputs.prop }}" '+%Y%m%d.%H%M%S')

      - name: Echo Package Version
        run: echo ${{steps.versionNumber.outputs.prop}}.${{ steps.formatedLastModifiedOn.outputs.formatedTimeStamp }}

      - name: Echo Release Notes
        run: echo ${{ github.event.inputs.release-notes}}

      - name: Commit Data Plan
        uses: EndBug/add-and-commit@v5
        with:
          message: '${{ github.event.inputs.release-notes}}'
          add: ${{ steps.dataPlanVersionFile.outputs.prop }}
          tag: v${{steps.versionNumber.outputs.prop}}.${{ steps.formatedLastModifiedOn.outputs.formatedTimeStamp }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-package-version:
    runs-on: ubuntu-latest
    name: Generate Package Version
    needs: fetch-data-plan
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Data Plan Id
        id: dataPlanId
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.dataPlanId'

      - name: Get Version Number
        id: versionNumber
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.versionNumber'

      - name: Get Version File
        id: dataPlanVersionFile
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.dataPlanVersionFile'

      - name: Get Last Modified On
        id: lastModifiedOn
        uses: notiz-dev/github-action-json-property@release
        with:
          path: ${{ steps.dataPlanVersionFile.outputs.prop }}
          prop_path: 'last_modified_on'

      - name: Format and Save Last Modified On
        id: formatedLastModifiedOn
        run: echo ::set-output name=formatedTimeStamp::$(date -d "${{ steps.lastModifiedOn.outputs.prop }}" '+%Y%m%d.%H%M%S')

      - name: Echo Package Version
        run: echo ${{steps.versionNumber.outputs.prop}}.${{ steps.formatedLastModifiedOn.outputs.formatedTimeStamp }}

      - name: Modify Package Name
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: 'templates/package.json'
          key: 'name'
          value: '@${{github.repository}}-${{steps.dataPlanId.outputs.prop}}'

      - name: Modify Repository
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: 'templates/package.json'
          key: 'repository'
          value: 'git@github.com:${{github.repository}}.git'

      - name: Modify Package Version
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: 'templates/package.json'
          key: 'version'
          value: ${{steps.versionNumber.outputs.prop}}.${{ steps.formatedLastModifiedOn.outputs.formatedTimeStamp }}

      - name: Archive Data Plan Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: templates/package.json

  generate-smartype-dist:
    name: Generate Smartype Dist
    runs-on: ubuntu-latest
    needs: [fetch-data-plan, generate-package-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 1.15
        uses: actions/setup-java@v1
        with:
          java-version: 1.15

      - name: Copy smartype.config.json template
        run: cp template/smartype.config.json .

      - name: Get Version File
        id: dataPlanVersionFile
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'mp.config.json'
          prop_path: 'planningConfig.dataPlanVersionFile'

      - name: Modify Smartype Config
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: 'smartype.config.json'
          key: apiSchemaFile
          value: ${{steps.dataPlanVersionFile.outputs.prop}}

      - name: Modify Smartype Config Web Options
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: 'smartype.config.json'
          key: webOptions.enabled
          value: true

      - name: Get Smartype Jar
        run: |
          curl https://repo1.maven.org/maven2/com/mparticle/smartype-generator/1.2.1/smartype-generator-1.2.1.jar > smartype.jar

      - name: Run smartype generator
        run: |
          java -jar smartype.jar generate

      - name: Download package.json
        uses: actions/download-artifact@v2
        with:
          name: package
          path: smartype-dist/web

      - name: Archive Smartype Dist Web
        uses: actions/upload-artifact@v2
        with:
          name: smartype-dist-web
          path: smartype-dist/web

  deploy-npm-package:
    name: Deploy NPM Package
    runs-on: ubuntu-latest
    needs: [fetch-data-plan, generate-smartype-dist]
    steps:
      - name: Download Smartype Web Distribution
        uses: actions/download-artifact@v2
        with:
          name: smartype-dist-web

      - name: View Directory
        run: ls -altr

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{github.actor}}'

      - name: NPM Install
        run: npm install

      - name: NPM Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
